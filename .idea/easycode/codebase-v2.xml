<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="com.obiscr.chatgpt.settings.EasyCodeState">
    <option name="projectFiles" value="$PROJECT_DIR$/src/main/java/Criptografia.java;C:/Users/Delane Jr/Documents/Facul/6ºSemestre/1ºBimestre/Inteligencica Artifficial/SistemaCriptografiaIA/pom.xml" />
    <option name="forceFullIndex" value="false" />
    <option name="fileSummaryMaps" value="{&quot;C:/Users/Delane Jr/Documents/Facul/6ºSemestre/1ºBimestre/Inteligencica Artifficial/SistemaCriptografiaIA&quot;:&quot;{\&quot;/src/main/java/Criptografia.java\&quot;:\&quot;This Java file defines a Criptografia (Cryptography) class that provides methods for encrypting and decrypting messages.\\n\\nKey functions:\\n\\n- criptografarMensagem(String entradaDecodigicada) - Encrypts a message by replacing each letter with its corresponding code from the tabelaCodigo array. Loops through the input string and calls buscarCodigo() to find the code for each character.\\n\\n- descriptografarMensagem(String entradaCriptografada) - Decrypts an encrypted message by replacing each code with its corresponding letter from tabelaCodigo. Loops through the input string and calls buscarLetra() to find the letter for each character. \\n\\n- buscarCodigo(char letra, StringBuilder mensagemCriptografada, boolean codigoEncontrado) - Searches the tabelaCodigo array for the code corresponding to the given letter and appends it to the output string builder.\\n\\n- buscarLetra(char caracter, StringBuilder mensagemDescriptografada, boolean letraEncontrada) - Searches tabelaCodigo for the letter corresponding to the given character and appends it to the output string builder.\\n\\n- tabelaCodigo - A 2D char array that defines the encryption/decryption mapping between letters and codes.\\n\\nSo in summary, it provides encryption and decryption of text messages by mapping letters to codes defined in a table.\&quot;,\&quot;/pom.xml\&quot;:\&quot;This pom.xml file is the project object model file for a Maven project. It contains important configuration and metadata for the project.\\n\\nSome key things it does:\\n\\n- Defines the project coordinates - groupId, artifactId, version. These uniquely identify the project.\\n\\n- Specifies the packaging type as jar, indicating this project will produce a JAR file.\\n\\n- Sets the name and URL for the project. \\n\\n- Configures the Java version (source and target) to use for compilation. \\n\\n- Defines dependencies on external libraries (JUnit for testing, Lombok for annotations). Maven will download these dependencies.\\n\\n- Tells Maven this is a Maven project and conforms to the Maven POM schema. \\n\\n- Allows Maven to identify the project and manage the build lifecycle.\\n\\nSo in summary, the pom.xml provides:\\n\\n- Project identification and configuration \\n- Dependency management\\n- Build configuration \\n- Metadata for Maven to understand and build the project\\n\\nIt\\u0027s a core configuration file that allows Maven to build, manage and understand the project.\&quot;}&quot;}" />
  </component>
</project>